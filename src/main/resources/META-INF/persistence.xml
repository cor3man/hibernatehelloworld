<persistence
        version="2.1"
        xmlns="http://xmlns.jcp.org/xml/ns/persistence"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
http://xmlns.jcp.org/xml/ns/persistence_2_1.xsd">

    <persistence-unit name="TestPU">

        <jta-data-source>myDS</jta-data-source>
        <class>com.alis.hibernate.hw.model.entityassociations.onetomany.testclases.Shipment</class>
        <class>com.alis.hibernate.hw.model.entityassociations.onetomany.testclases.User</class>
        <class>com.alis.hibernate.hw.model.entityassociations.onetomany.testclases.Address</class>
        <class>com.alis.hibernate.hw.model</class>
        <exclude-unlisted-classes>true</exclude-unlisted-classes>

        <properties>

            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="root" />
            <property
                    name="javax.persistence.schema-generation.database.action"
                    value="drop-and-create"/>
            <property name="hibernate.format_sql" value="true"/>
            <property name="hibernate.use_sql_comments" value="true"/>
            <property name="hibernate.archive.autodetection" value="none"/>

        </properties>
    </persistence-unit>

    <persistence-unit name="OneToOnePU">

        <jta-data-source>myDS</jta-data-source>
        <class>com.alis.hibernate.hw.model.entityassociations.onetoone.Address</class>
        <class>com.alis.hibernate.hw.model.entityassociations.onetoone.User</class>
        <class>com.alis.hibernate.hw.model.entityassociations.onetoone.AddressBi</class>
        <class>com.alis.hibernate.hw.model.entityassociations.onetoone.UserBi</class>
        <class>com.alis.hibernate.hw.model</class>
        <exclude-unlisted-classes>true</exclude-unlisted-classes>

        <properties>

            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="root" />
            <property
                    name="javax.persistence.schema-generation.database.action"
                    value="drop-and-create"/>
            <property name="hibernate.format_sql" value="true"/>
            <property name="hibernate.use_sql_comments" value="true"/>
            <property name="hibernate.archive.autodetection" value="none"/>

        </properties>
    </persistence-unit>


    <persistence-unit name="ManyToOnePU">

        <jta-data-source>myDS</jta-data-source>
        <class>com.alis.hibernate.hw.model.entityassociations.onetomany.Item</class>
        <class>com.alis.hibernate.hw.model.entityassociations.onetomany.ItemBag</class>
        <class>com.alis.hibernate.hw.model.entityassociations.onetomany.jointable.Item</class>
        <class>com.alis.hibernate.hw.model.entityassociations.onetomany.jointable.User</class>
        <class>com.alis.hibernate.hw.model.entityassociations.onetomany.Bid</class>
        <class>com.alis.hibernate.hw.model.entityassociations.onetomany.BidBag</class>
        <class>com.alis.hibernate.hw.model.entityassociations.onetomany.BidList</class>
        <class>com.alis.hibernate.hw.model.entityassociations.onetomany.BidListSimple</class>
        <class>com.alis.hibernate.hw.model.entityassociations.onetomany.ItemList</class>
        <class>com.alis.hibernate.hw.model</class>
        <exclude-unlisted-classes>true</exclude-unlisted-classes>

        <properties>

            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="root" />
            <property
                    name="javax.persistence.schema-generation.database.action"
                    value="drop-and-create"/>
            <property name="hibernate.format_sql" value="true"/>
            <property name="hibernate.use_sql_comments" value="true"/>
            <property name="hibernate.archive.autodetection" value="none"/>

        </properties>
    </persistence-unit>

    <persistence-unit name="MappingCollectionsPU">

        <jta-data-source>myDS</jta-data-source>
<!--
        <class>com.alis.hibernate.hw.model.mappingcollections.Item</class>
        <class>com.alis.hibernate.hw.model.mappingcollections.ItemBag</class>
        <class>com.alis.hibernate.hw.model.mappingcollections.ItemList</class>
-->
        <class>com.alis.hibernate.hw.model.mappingcollections.ItemComponent</class>
        <class>com.alis.hibernate.hw.model.mappingcollections.Images</class>
        <class>com.alis.hibernate.hw.model</class>
        <exclude-unlisted-classes>true</exclude-unlisted-classes>

        <properties>

            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="root" />
            <property
                    name="javax.persistence.schema-generation.database.action"
                    value="drop-and-create"/>
            <property name="hibernate.format_sql" value="true"/>
            <property name="hibernate.use_sql_comments" value="true"/>
            <property name="hibernate.archive.autodetection" value="none"/>

        </properties>
    </persistence-unit>

    <persistence-unit name="MappingInhertPUjoins">

        <jta-data-source>myDS</jta-data-source>
        <class>com.alis.hibernate.hw.model.mappinginherit.joins.BillingDetails</class>
        <class>com.alis.hibernate.hw.model.mappinginherit.joins.CreditCard</class>
        <class>com.alis.hibernate.hw.model.mappinginherit.joins.BankAccount</class>
        <class>com.alis.hibernate.hw.model.mappinginherit.joins.User</class>
        <class>com.alis.hibernate.hw.model</class>
        <exclude-unlisted-classes>true</exclude-unlisted-classes>

        <properties>

            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="root" />
            <property
                    name="javax.persistence.schema-generation.database.action"
                    value="drop-and-create"/>
            <property name="hibernate.format_sql" value="true"/>
            <property name="hibernate.use_sql_comments" value="true"/>
            <property name="hibernate.archive.autodetection" value="none"/>

        </properties>
    </persistence-unit>


    <persistence-unit name="MappingInhertPUsingle">

        <!--
             Each persistence unit must have a database connection. Here you delegate to
             an existing <code>java.sql.DataSource</code>. Hibernate will find the data source
             by name with a JNDI lookup on startup.
        -->
        <jta-data-source>myDS</jta-data-source>

        <!--
            A persistent unit has persistent (mapped) classes, you list them here.
        -->
        <class>com.alis.hibernate.hw.model.mappinginherit.singletable.BillingDetails</class>
        <class>com.alis.hibernate.hw.model.mappinginherit.singletable.CreditCard</class>
        <class>com.alis.hibernate.hw.model.mappinginherit.singletable.BankAccount</class>
        <class>com.alis.hibernate.hw.model</class>

        <!--
            Hibernate can scan your classpath for mapped classes and add them automatically
            to your persistence unit. This setting disables that feature.
        -->
        <exclude-unlisted-classes>true</exclude-unlisted-classes>

        <!--
            Standard or vendor-specific options can be set as properties on a persistence unit.
            Any standard properties have the <code>javax.persistence</code> name prefix, Hibernate's
            settings use <code>hibernate</code>
        -->
        <properties>

            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="root" />

            <!--
                The JPA engine should drop and re-create the SQL schema in the database
                automatically when it boots. This is ideal for automated testing, when
                you want to work with a clean database for every test run.
            -->
            <property
                    name="javax.persistence.schema-generation.database.action"
                    value="drop-and-create"/>

            <!--
                When printing SQL in logs, let Hibernate format the SQL nicely and generate
                comments into the SQL string so we know why Hibernate executed the SQL statement.
            -->
            <property name="hibernate.format_sql" value="true"/>
            <property name="hibernate.use_sql_comments" value="true"/>

            <!-- Disable Hibernate scanning completely, we also don't want any hbm.xml files
                 discovered and added automatically. -->
            <property name="hibernate.archive.autodetection" value="none"/>

        </properties>
    </persistence-unit>


    <persistence-unit name="MappingInhertPU">

        <!--
             Each persistence unit must have a database connection. Here you delegate to
             an existing <code>java.sql.DataSource</code>. Hibernate will find the data source
             by name with a JNDI lookup on startup.
        -->
        <jta-data-source>myDS</jta-data-source>

        <!--
            A persistent unit has persistent (mapped) classes, you list them here.
        -->
        <class>com.alis.hibernate.hw.model.mappinginherit.BillingDetails</class>
        <class>com.alis.hibernate.hw.model.mappinginherit.CreditCard</class>
        <class>com.alis.hibernate.hw.model.mappinginherit.BankAccount</class>
        <class>com.alis.hibernate.hw.model</class>

        <!--
            Hibernate can scan your classpath for mapped classes and add them automatically
            to your persistence unit. This setting disables that feature.
        -->
        <exclude-unlisted-classes>true</exclude-unlisted-classes>

        <!--
            Standard or vendor-specific options can be set as properties on a persistence unit.
            Any standard properties have the <code>javax.persistence</code> name prefix, Hibernate's
            settings use <code>hibernate</code>
        -->
        <properties>

            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="root" />

            <!--
                The JPA engine should drop and re-create the SQL schema in the database
                automatically when it boots. This is ideal for automated testing, when
                you want to work with a clean database for every test run.
            -->
            <property
                    name="javax.persistence.schema-generation.database.action"
                    value="drop-and-create"/>

            <!--
                When printing SQL in logs, let Hibernate format the SQL nicely and generate
                comments into the SQL string so we know why Hibernate executed the SQL statement.
            -->
            <property name="hibernate.format_sql" value="true"/>
            <property name="hibernate.use_sql_comments" value="true"/>

            <!-- Disable Hibernate scanning completely, we also don't want any hbm.xml files
                 discovered and added automatically. -->
            <property name="hibernate.archive.autodetection" value="none"/>

        </properties>
    </persistence-unit>



    <persistence-unit name="HelloWorldPU1">

        <!--
             Each persistence unit must have a database connection. Here you delegate to
             an existing <code>java.sql.DataSource</code>. Hibernate will find the data source
             by name with a JNDI lookup on startup.
        -->
        <jta-data-source>myDS</jta-data-source>

        <!--
            A persistent unit has persistent (mapped) classes, you list them here.
        -->
        <class>com.alis.hibernate.hw.model.helloworld.Message</class>
        <class>com.alis.hibernate.hw.model.helloworld.Item</class>
        <class>com.alis.hibernate.hw.model</class>

        <!--
            Hibernate can scan your classpath for mapped classes and add them automatically
            to your persistence unit. This setting disables that feature.
        -->
        <exclude-unlisted-classes>true</exclude-unlisted-classes>

        <!--
            Standard or vendor-specific options can be set as properties on a persistence unit.
            Any standard properties have the <code>javax.persistence</code> name prefix, Hibernate's
            settings use <code>hibernate</code>
        -->
        <properties>

            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="root" />

            <!--
                The JPA engine should drop and re-create the SQL schema in the database
                automatically when it boots. This is ideal for automated testing, when
                you want to work with a clean database for every test run.
            -->
            <property
                    name="javax.persistence.schema-generation.database.action"
                    value="drop-and-create"/>

            <!--
                When printing SQL in logs, let Hibernate format the SQL nicely and generate
                comments into the SQL string so we know why Hibernate executed the SQL statement.
            -->
            <property name="hibernate.format_sql" value="true"/>
            <property name="hibernate.use_sql_comments" value="true"/>

            <!-- Disable Hibernate scanning completely, we also don't want any hbm.xml files
                 discovered and added automatically. -->
            <property name="hibernate.archive.autodetection" value="none"/>

        </properties>
    </persistence-unit>




    <persistence-unit name="HelloWorldPU">
        <provider>org.hibernate.ejb.HibernatePersistence</provider>
        <class>com.alis.hibernate.hw.model.Message</class>
        <class>com.alis.hibernate.hw.model.User</class>
        <class>com.alis.hibernate.hw.model</class>
        <exclude-unlisted-classes>true</exclude-unlisted-classes>
        <properties>

<!--
            <property name="javax.persistence.jdbc.driver" value="com.mysql.jdbc.Driver" />
            <property name="javax.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/hwdb?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC" />
-->


            <property name="javax.persistence.jdbc.driver" value="net.sf.log4jdbc.DriverSpy" />
            <property name="javax.persistence.jdbc.url" value="jdbc:log4jdbc:mysql://localhost:3306/hwdb?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=UTC" />


            <property name="javax.persistence.jdbc.user" value="root" />
            <property name="javax.persistence.jdbc.password" value="root" />

            <property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/>

            <property name="hibernate.format_sql" value="true"/>
            <property name="hibernate.use_sql_comments" value="true"/>
            <property name="hibernate.show_sql" value="false" />
            <property name="hibernate.auto_quote_keyword" value="true" />


<!--            <property name="hibernate.physical_naming_strategy"
                      value="com.alis.hibernate.hw.shared.MyNamingStrategy"/>-->

        </properties>
    </persistence-unit>
</persistence>
